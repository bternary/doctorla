// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200817160301_v48-LiveRequestDate")]
    partial class v48LiveRequestDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 690, DateTimeKind.Local).AddTicks(4400));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Address","dbo");
                });

            modelBuilder.Entity("Data.Domain.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 686, DateTimeKind.Local).AddTicks(4010));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AddressType","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultName = "Home Address",
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Ev Adresi"
                        },
                        new
                        {
                            Id = 2,
                            DefaultName = "Work Address",
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "�� Adresi"
                        });
                });

            modelBuilder.Entity("Data.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentDoctorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppointmentFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentRate")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentRateNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("int");

                    b.Property<string>("DoctorDeleteReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationCompanys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 700, DateTimeKind.Local).AddTicks(6660));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("InProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("InProcessDates")
                        .HasColumnType("datetime2");

                    b.Property<int>("InProcessUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SessionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionPrice")
                        .HasColumnType("int");

                    b.Property<int>("SessionTime")
                        .HasColumnType("int");

                    b.Property<int>("SickId")
                        .HasColumnType("int");

                    b.Property<int?>("SickId1")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<string>("UserCancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("SickId");

                    b.HasIndex("SickId1");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment","dbo");
                });

            modelBuilder.Entity("Data.Domain.AppointmentFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 730, DateTimeKind.Local).AddTicks(2510));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentFiles","dbo");
                });

            modelBuilder.Entity("Data.Domain.AppointmentProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 718, DateTimeKind.Local).AddTicks(400));

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessTypes")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentProcess","dbo");
                });

            modelBuilder.Entity("Data.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 673, DateTimeKind.Local).AddTicks(510));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City","dbo");
                });

            modelBuilder.Entity("Data.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Data.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 669, DateTimeKind.Local).AddTicks(120));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country","dbo");
                });

            modelBuilder.Entity("Data.Domain.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 680, DateTimeKind.Local).AddTicks(800));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("County","dbo");
                });

            modelBuilder.Entity("Data.Domain.DailyCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlertDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlertDayCounter")
                        .HasColumnType("int");

                    b.Property<string>("AlertDayHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LiveRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LiveRoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseAlertDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseAlertDaysHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyCheck","dbo");
                });

            modelBuilder.Entity("Data.Domain.DailyCheckDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyCheckId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<int>("TitleOrder")
                        .HasColumnType("int");

                    b.Property<int>("ValuesTitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyCheckId");

                    b.HasIndex("ValuesTitleId");

                    b.ToTable("DailyCheckDetail","dbo");
                });

            modelBuilder.Entity("Data.Domain.DailyCheckDetailValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyCheckDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleOrder")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyCheckDetailId");

                    b.ToTable("DailyCheckDetailValues","dbo");
                });

            modelBuilder.Entity("Data.Domain.DailyCheckPackages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DailyCheckPackages","dbo");
                });

            modelBuilder.Entity("Data.Domain.DailyCheckPackagesValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<double>("MaxValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("MinValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyCheckPackagesValues","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 0,
                            Icon = "flaticon-blood-pressure-meter",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 139.0,
                            MinValue = 89.0,
                            Name = "Kronik Tansiyon",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 0,
                            Icon = "flaticon-blood-pressure-gauge",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 120.0,
                            MinValue = 80.0,
                            Name = "Tansiyon",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 0,
                            Icon = "flaticon-fever",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 37.5,
                            MinValue = 35.5,
                            Name = "Ateş",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 0,
                            Icon = "flaticon-diabetes-1",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 100.0,
                            MinValue = 70.0,
                            Name = "Açlık Şekeri",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 0,
                            Icon = "flaticon-diabetes-1",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 140.0,
                            MinValue = 100.0,
                            Name = "Tokluk Şekeri",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 0,
                            Icon = "flaticon-heart-2",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 100.0,
                            MinValue = 60.0,
                            Name = "Nabız",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 0.80000000000000004,
                            MinValue = 0.0,
                            Name = "CRP",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 20.0,
                            MinValue = 0.0,
                            Name = "Sedimantasyon",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 0.040000000000000001,
                            MinValue = 0.0,
                            Name = "Troponin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 125.0,
                            MinValue = 74.0,
                            Name = "BNP",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 11,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 0.0,
                            Name = "CK-MB",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 500.0,
                            MinValue = 0.0,
                            Name = "D-Dimer",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 13,
                            DoctorId = 0,
                            Icon = "flaticon-drinking-water",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 5.0,
                            MinValue = 2.0,
                            Name = "Su Kullanımı",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 14,
                            DoctorId = 0,
                            Icon = "flaticon-weighing-machine",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 24.899999999999999,
                            MinValue = 19.0,
                            Name = "Vücut Kitle İndeksi",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 15,
                            DoctorId = 0,
                            Icon = "flaticon-mental-health-2",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 0.0,
                            MinValue = 0.0,
                            Name = "Mental Durum",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 16,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 10.0,
                            MinValue = 0.0,
                            Name = "Beta-HCG",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 17,
                            DoctorId = 0,
                            Icon = "flaticon-drugs",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 0.0,
                            MinValue = 0.0,
                            Name = "İlaç Kullanımı",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 18,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 1000.0,
                            MinValue = 4.0,
                            Name = "WBC",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 19,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 115.0,
                            MinValue = 77.0,
                            Name = "MCV",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 20,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 52000.0,
                            MinValue = 4.0,
                            Name = "RBC",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 21,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 400000.0,
                            MinValue = 100.0,
                            Name = "PLT (Trombosit)",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 22,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 40.0,
                            MinValue = 20.0,
                            Name = "LYMPH % (Lenfosit)",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 23,
                            DoctorId = 0,
                            Icon = "flaticon-blood-test-1",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 200.0,
                            MinValue = 140.0,
                            Name = "Total Kolestrol",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 24,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 125.0,
                            MinValue = 90.0,
                            Name = "LDL",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 25,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 70.0,
                            MinValue = 35.0,
                            Name = "HDL",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 26,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 200.0,
                            MinValue = 40.0,
                            Name = "Trigliserit",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 27,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 291.0,
                            MinValue = 100.0,
                            Name = "Ferritin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 28,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 270.0,
                            MinValue = 120.0,
                            Name = "Demir Bağlama Kapasitesi",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 29,
                            DoctorId = 0,
                            Icon = "flaticon-vitamins",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 911.0,
                            MinValue = 211.0,
                            Name = "B12",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 30,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 17.0,
                            MinValue = 3.0,
                            Name = "Folat",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 31,
                            DoctorId = 0,
                            Icon = "flaticon-vitamins",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 80.0,
                            MinValue = 21.0,
                            Name = "D Vit",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 32,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 3.8999999999999999,
                            MinValue = 2.5,
                            Name = "Serbest t3",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 33,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 1.76,
                            MinValue = 0.89000000000000001,
                            Name = "Serbest t4",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 34,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 5.5,
                            MinValue = 0.34999999999999998,
                            Name = "TSH",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 35,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 49.0,
                            MinValue = 10.0,
                            Name = "ALT",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 36,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 36.0,
                            MinValue = 0.0,
                            Name = "AST",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 37,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 23.0,
                            MinValue = 9.0,
                            Name = "BUN",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 38,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 50.0,
                            MinValue = 20.0,
                            Name = "ÜRE",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 39,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 1.1000000000000001,
                            MinValue = 0.5,
                            Name = "Kreatin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 40,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 1.2,
                            MinValue = 0.29999999999999999,
                            Name = "Total Bilirubin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 41,
                            DoctorId = 0,
                            Icon = "flaticon - heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 0.29999999999999999,
                            MinValue = 0.0,
                            Name = "Direk Bilirubin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 42,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 76.0,
                            MinValue = 14.0,
                            Name = "Total Testosteron",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 43,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 29.199999999999999,
                            MinValue = 28.0,
                            Name = "Prolaktin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 44,
                            DoctorId = 0,
                            Icon = "flaticon-insulin",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "İnsülin",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 45,
                            DoctorId = 0,
                            Icon = "flaticon-heartbeat",
                            IsDefault = false,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 1000.0,
                            MinValue = 4.0,
                            Name = "WBC",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1000,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Tansiyon",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1001,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Açlık Kan Şekeri",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1002,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Tokluk Kan Şekeri",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1003,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Vütuc Sıcaklığı",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1004,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Ağrı",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1005,
                            DoctorId = 0,
                            Icon = "far fa-clipboard",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Mod",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1006,
                            DoctorId = 0,
                            Icon = "fas fa-file-upload",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Sıvı Dengesi",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1100,
                            DoctorId = 0,
                            Icon = "flaticon-medical-report-1",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Hasta Notu",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1101,
                            DoctorId = 0,
                            Icon = "flaticon-medical-report-1",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Hemşire Notu",
                            TitleOrder = 0
                        },
                        new
                        {
                            Id = 1102,
                            DoctorId = 0,
                            Icon = "flaticon-file",
                            IsDefault = true,
                            IsDoctor = false,
                            IsNew = false,
                            MaxValue = 25.0,
                            MinValue = 3.0,
                            Name = "Dosyalar",
                            TitleOrder = 0
                        });
                });

            modelBuilder.Entity("Data.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 779, DateTimeKind.Local).AddTicks(4550));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Department","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-protection",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Alerji ve İmmünoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 2,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-neurosurgery",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beyin ve Sinir Cerrahisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 3,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-surgery-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Cerrahi Onkoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 4,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-baby",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Cerrahisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 5,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-digestive-system",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Gastroenterolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 6,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-blood-sample",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Hematolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 7,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-care",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Kardiyolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 8,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-babies",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Psiyikatri",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 9,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-x-ray",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Romatolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 10,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-baby-boy",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Sağlığı ve Hastalıkları",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 11,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-kidneys-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çocuk Ürolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 12,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-dermatology",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dermatoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 13,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-adrenal-gland",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Endokrinoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 14,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-infected-lungs",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Enfeksiyon",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 15,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-physical",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fizik Tedavi ve Rehabilitasyon",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 16,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-medical-tools",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Genel Cerrahi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 17,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-chest-pain",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Göğüs Cerrahisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 18,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-lung",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Göğüs Hastalıkları",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 19,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-eye",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Göz Hastalıkları",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 21,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-test",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hematoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 22,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-stomach",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İç Hastalıkları",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 23,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-gynecology",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Jinekolojik Onkoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 24,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-sexual-health",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kadın Hastalıkları ve Doğum",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 25,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-heart-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kalp ve Damar Cerrahisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 26,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-cardiology",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kardiyoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 27,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-kulakburunbugaz",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kulak Burun Boğaz",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 28,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-kidney",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nefroloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 29,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-neurology-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nöroloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 30,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-broken-arm",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ortopedi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 31,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-surgery",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Plastik Cerrahi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 32,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-mental-health-2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Psikiyatri",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 33,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-radiation",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Radyasyon Onkolojisi",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 34,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-joint-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Romatoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 35,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-quit-smoking-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sigarayı Bıraktırma",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 36,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-radiotherapy-1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tıbbi Onkoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 37,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-uroloji",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Üroloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 38,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-burn",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yanık Polikliniği",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 47,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-nutrition",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beslenme ve Diyet",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 48,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-newborn-2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Doğum Koçu",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 49,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-breastfeeding",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Emzirme Danışmanı",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 50,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-listening",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Odyoloji",
                            ParentId = 0
                        },
                        new
                        {
                            Id = 51,
                            IDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IUser = 0,
                            Image = "flaticon-inspiration",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Psikoterapi ",
                            ParentId = 0
                        });
                });

            modelBuilder.Entity("Data.Domain.DoctorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorUniqueId")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 753, DateTimeKind.Local).AddTicks(1580));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PageView")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<string>("UniverstyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DoctorDetail","dbo");
                });

            modelBuilder.Entity("Data.Domain.DoctorEducations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailId");

                    b.ToTable("DoctorEducations","dbo");
                });

            modelBuilder.Entity("Data.Domain.DoctorExperiences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailId");

                    b.ToTable("DoctorExperiences","dbo");
                });

            modelBuilder.Entity("Data.Domain.DoctorMedicalInterests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailId");

                    b.ToTable("DoctorMedicalInterests");
                });

            modelBuilder.Entity("Data.Domain.DoctorScientificMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorDetailId");

                    b.ToTable("DoctorScientificMembership","dbo");
                });

            modelBuilder.Entity("Data.Domain.Donations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("DonationCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Data.Domain.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Data.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 662, DateTimeKind.Local).AddTicks(8330));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Menu","dbo");
                });

            modelBuilder.Entity("Data.Domain.MenuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 658, DateTimeKind.Local).AddTicks(4790));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MenuType","dbo");
                });

            modelBuilder.Entity("Data.Domain.NotifyTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 786, DateTimeKind.Local).AddTicks(9480));

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("userType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotifyTokens","dbo");
                });

            modelBuilder.Entity("Data.Domain.NotifyWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("NotifyWarning","dbo");
                });

            modelBuilder.Entity("Data.Domain.PackageChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyCheckId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DailyCheckId");

                    b.ToTable("PackageChat");
                });

            modelBuilder.Entity("Data.Domain.PaymentProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 833, DateTimeKind.Local).AddTicks(9530));

                    b.Property<string>("ProcessMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentProcess","dbo");
                });

            modelBuilder.Entity("Data.Domain.Referance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 654, DateTimeKind.Local).AddTicks(9680));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Referance","dbo");
                });

            modelBuilder.Entity("Data.Domain.RelUserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 646, DateTimeKind.Local).AddTicks(4060));

                    b.Property<int>("IUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("SessionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("RelUserDepartment","dbo");
                });

            modelBuilder.Entity("Data.Domain.RoleGroup", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup","dbo");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DefaultName = "Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = (short)3,
                            DefaultName = "User",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Data.Domain.Sick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 735, DateTimeKind.Local).AddTicks(5950));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sick","dbo");
                });

            modelBuilder.Entity("Data.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBalance")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 543, DateTimeKind.Local).AddTicks(7500));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("defaultuser.png");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndTime")
                        .HasColumnType("datetime2");

                    b.Property<short>("RoleGroupId")
                        .HasColumnType("smallint");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("User","dbo");
                });

            modelBuilder.Entity("Data.Domain.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bloodtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicDiseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyDiseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HearUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<DateTime>("IDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 8, 17, 19, 2, 59, 744, DateTimeKind.Local).AddTicks(7500));

                    b.Property<int>("IUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegularlyMedicines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UUDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetail","dbo");
                });

            modelBuilder.Entity("Data.Domain.UserType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserType","dbo");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DefaultName = "Doctor",
                            Name = "Doktor"
                        },
                        new
                        {
                            Id = (short)2,
                            DefaultName = "Nurse",
                            Name = "Hemşire"
                        },
                        new
                        {
                            Id = (short)3,
                            DefaultName = "Patient",
                            Name = "Hasta"
                        },
                        new
                        {
                            Id = (short)4,
                            DefaultName = "Admin",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Data.Domain.Address", b =>
                {
                    b.HasOne("Data.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.Appointment", b =>
                {
                    b.HasOne("Data.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Domain.Department", null)
                        .WithMany("Appointment")
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("Data.Domain.Sick", "Sick")
                        .WithMany()
                        .HasForeignKey("SickId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Domain.Sick", null)
                        .WithMany("Appointment")
                        .HasForeignKey("SickId1");

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany("Appointment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserAppointmen_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.AppointmentFiles", b =>
                {
                    b.HasOne("Data.Domain.Appointment", "Appointment")
                        .WithMany("AppointmentFiles")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.AppointmentProcess", b =>
                {
                    b.HasOne("Data.Domain.Appointment", "Appointment")
                        .WithMany("AppointmentProcess")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Data.Domain.City", b =>
                {
                    b.HasOne("Data.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.County", b =>
                {
                    b.HasOne("Data.Domain.City", "City")
                        .WithMany("Counties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DailyCheck", b =>
                {
                    b.HasOne("Data.Domain.User", "Nurse")
                        .WithMany("NurseDailyCheck")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("nurseFrgn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany("DailyCheck")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userFrgn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DailyCheckDetail", b =>
                {
                    b.HasOne("Data.Domain.DailyCheck", "DailyCheck")
                        .WithMany("DailyCheckDetail")
                        .HasForeignKey("DailyCheckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Domain.DailyCheckPackagesValues", "ValuesTitle")
                        .WithMany("DailyCheckDetail")
                        .HasForeignKey("ValuesTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DailyCheckDetailValues", b =>
                {
                    b.HasOne("Data.Domain.DailyCheckDetail", "DailyCheckDetail")
                        .WithMany("Values")
                        .HasForeignKey("DailyCheckDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DoctorDetail", b =>
                {
                    b.HasOne("Data.Domain.User", "User")
                        .WithOne("DoctorDetail")
                        .HasForeignKey("Data.Domain.DoctorDetail", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DoctorEducations", b =>
                {
                    b.HasOne("Data.Domain.DoctorDetail", "DoctorDetail")
                        .WithMany("DoctorEducations")
                        .HasForeignKey("DoctorDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DoctorExperiences", b =>
                {
                    b.HasOne("Data.Domain.DoctorDetail", "DoctorDetail")
                        .WithMany("DoctorExperiences")
                        .HasForeignKey("DoctorDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DoctorMedicalInterests", b =>
                {
                    b.HasOne("Data.Domain.DoctorDetail", "DoctorDetail")
                        .WithMany("DoctorMedicalInterests")
                        .HasForeignKey("DoctorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.DoctorScientificMembership", b =>
                {
                    b.HasOne("Data.Domain.DoctorDetail", "DoctorDetail")
                        .WithMany("DoctorScientificMembership")
                        .HasForeignKey("DoctorDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.Menu", b =>
                {
                    b.HasOne("Data.Domain.MenuType", "MenuType")
                        .WithMany("Menus")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.NotifyWarning", b =>
                {
                    b.HasOne("Data.Domain.Department", "Department")
                        .WithMany("NotifyWarnings")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("departmentFrgn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany("NotifyWarnings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("notifyuserFrgn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.PackageChat", b =>
                {
                    b.HasOne("Data.Domain.DailyCheck", "DailyCheck")
                        .WithMany("PackageChat")
                        .HasForeignKey("DailyCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.RelUserDepartment", b =>
                {
                    b.HasOne("Data.Domain.Department", "Department")
                        .WithMany("RelUserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Domain.User", "User")
                        .WithMany("RelUserDepartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.User", b =>
                {
                    b.HasOne("Data.Domain.RoleGroup", "RoleGroup")
                        .WithMany("Users")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Domain.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Domain.UserDetail", b =>
                {
                    b.HasOne("Data.Domain.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Data.Domain.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
